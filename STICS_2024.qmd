---
title: "STIC_2024"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

8/4/24
Reading in observations from STIC sensors in Hubbard Brook from summer 2024.
Summary of observations for Kevin and JP
```{r}
#setup
library(pacman)
p_load(tidyverse, sp, mapview, tmap, stars,
       lubridate, gganimate, animation, patchwork, ggrepel, whitebox,
       terra,  tidyterra)
#bring in STICr function
source("classify_wetdry.R")
source("tidy_hobo_data.R")

```

```{r}
#modified read_deployment function for summer 24 data
#inputs: folder, ws
read_deployment <- function(folder, wshed1){
  #file location
  #folder = "./summer2024/ZZ_summer24/"
                     #   wshed1 = "ZZ"
  
  files <- list.files(folder, pattern = ".csv")
  #deployment info
  deploy <- read.csv("./summer2024/stic2024.csv")
  #filter values must have different names than colnames
  w3 <- filter(deploy, wshed == wshed1)
  w3_n <- na.omit(w3)
  w3_n$start <- mdy_hm(w3_n$start)
  w3_n$end <- mdy_hm(w3_n$stop)

  sensor_ids <- as.character(w3_n$sensor)
  sensor_num <- (substr(files, 1, 8))

  # r <- c(sensor_ids, sensor_num)
  # r
  # length(unique(r))
  #i <- 12
  alldat <- NA
  for(i in 1:length(sensor_ids)){
    chosen <- paste0(sensor_ids[i], ".csv") #line to add i
    tryCatch({
    path_to_chosen <- paste0(folder, chosen)
    data <- tidy_hobo_data(path_to_chosen)
    # data <- tidy_hobo_data("./summer2024/ZZ_summer24/20011657.csv")


    #subset deployment information
    deployment_info <- filter(w3_n, sensor == sensor_ids[i])

    wet <- classify_wetdry(data,
                           classify_var = "condUncal",
                           method = "absolute",
                           threshold = 10)
    #remove dates before and after start and end date of deployment
    wet_filt <- filter(wet, datetime > deployment_info$start) %>%
      filter(datetime < deployment_info$end) %>% 
      bind_cols(deployment_info)


    if(i == 1) alldat <- wet_filt
    if(i > 1) alldat <- rbind(alldat, wet_filt)
    }, error = function(e){cat("ERROR :",conditionMessage(e), "\n")})
  }

#create new column that indicates if every sensor is deployed or not
alldat$all_deployed <- 0

alldat$all_deployed[alldat$datetime >= max(alldat$start) & alldat$datetime <= min(alldat$end)] <- 1

readout <- alldat %>% dplyr::select(-start, -end)

return(readout)
}
#converting temperature to Celcius is handled in tidy_hobo_data.R

#create dataframe for each watershed using read in data files function above
w3_24 <- read_deployment(folder = "./summer2024/W3_summer24/", 
                        wshed1 = "W3")
fb_24 <- read_deployment(folder = "./summer2024/FB_summer24/", 
                        wshed1 = "FB")
zz_24 <- read_deployment(folder = "./summer2024/ZZ_summer24/", 
                        wshed1 = "ZZ")

#combine all dataframes into one big one
all_24 <- bind_rows(w3_24, fb_24, zz_24)

#create final spreadsheet for uploading to EDI after combining with my other year of data
write.csv(all_24, "./summer2024/STICS2024.csv")
#instead of running all chunks above, just run this line
data <- read_csv("./summer2024/STICS2024.csv")



```
  
```{r}
#test figure to display when the sensors were flowing or not flowing
binary <- c("#DB995A",
            "#586BA4"
  )
ggplot(w3_24)+
  geom_tile(aes(x = datetime, y = number, fill = wetdry))+
  #facet_grid(~deployment, scales = "free") + 
  scale_fill_manual(drop = FALSE,
                     values = binary,
                    breaks = c("dry", "wet"),
                    labels = c("No flow", "flowing"),
                    name = ""
                    )+
  labs(title = "Streamflow permanence in W3",
       x = "")+
  theme_classic()
```
  
```{r}
#make the figure above, but without all the weird gaps
head(filter(w3_24, number == 17))
head(filter(w3_24, number == 16))

#sensor 17 has a 15 min timestep instead of a 30 min one, reduce the timestep to match the others and the figure will look nicer
without_17 <- filter(w3_24, number != 17)
sub <- filter(w3_24, number == 17) %>% 
  filter(row_number() %% 2 == 0)

w3_fixed <- rbind(without_17, sub)

ggplot(w3_fixed)+
  geom_tile(aes(x = datetime, y = number, fill = wetdry))+
  #facet_grid(~deployment, scales = "free") + 
  scale_fill_manual(drop = FALSE,
                     values = binary,
                    breaks = c("dry", "wet"),
                    labels = c("No flow", "flowing"),
                    name = ""
                    )+
  labs(title = "Streamflow permanence in W3",
       x = "")+
  theme_classic()


ggplot(fb_24)+
  geom_tile(aes(x = datetime, y = number, fill = wetdry))+
  #facet_grid(~deployment, scales = "free") + 
  scale_fill_manual(drop = FALSE,
                     values = binary,
                    breaks = c("dry", "wet"),
                    labels = c("No flow", "flowing"),
                    name = ""
                    )+
  labs(title = "Streamflow permanence in FB",
       x = "")+
  theme_classic()

ggplot(zz_24)+
  geom_tile(aes(x = datetime, y = number, fill = wetdry))+
  #facet_grid(~deployment, scales = "free") + 
  scale_fill_manual(drop = FALSE,
                     values = binary,
                    breaks = c("dry", "wet"),
                    labels = c("No flow", "flowing"),
                    name = ""
                    )+
  labs(title = "Streamflow permanence in ZZ",
       x = "")+
  theme_classic()
```

```{r}

#make the figure above, but with sensors ordered by drainage area on the y-axis
```

  
**8/13/24**
Prepping for research wrap up meeting with Kevin tomorrow.
Make summary map showing where sensors worked, and where they didn't
categories:
  0- not redeployed
  1- redeployed, worked whole time
  2- redeployed, failed or lost
  
```{r prep-for-mapping}
# copied from prep-for-mapping chunk from W3_STIC.Rmd
#Make a simple map for each watershed to serve as the template 
sheds <- vect('./HB/hbef_wsheds')
plot(sheds)
#method to subset shapefiles- use base r ways to subset
w3 <- sheds[2,]
plot(w3)

#read in shapefiles for each of the streams
w3_stream <- vect("./HB/hbstream/hb42_master_startend.shp")
fb_stream <- vect("./HB/hbstream/FB_subcatchment_flowlines.shp")
zz_stream <- vect("./HB/hbstream/ZZ_subcatchment_flowlines.shp")
#project the streams to wgs84
w3_stream_wgs <- project(w3_stream, "+proj=longlat +datum=WGS84")
fb_stream_wgs <- project(fb_stream, "+proj=longlat +datum=WGS84")
zz_stream_wgs <- project(zz_stream, "+proj=longlat +datum=WGS84")
#filter data for sensors in each shed
#changed to names used in this document
data_w3 <- unique(w3_24 %>% 
  dplyr::select(number, sensor, lat, long)) %>% 
  rename("ID" = number)
data_fb <- unique(fb_24 %>% 
  dplyr::select(number, sensor, lat, long)) %>% 
  rename("ID" = number)
data_zz <- unique(zz_24 %>% 
  dplyr::select(number, sensor, lat, long)) %>% 
  rename("ID" = number)
#convert dataframe of sensor locations to vector data
points_w3 <- vect(data_w3, geom=c("long", "lat"), crs = "+proj=longlat +datum=WGS84")
points_fb <- vect(data_fb, geom=c("long", "lat"), crs = "+proj=longlat +datum=WGS84")
points_zz <- vect(data_zz, geom=c("long", "lat"), crs = "+proj=longlat +datum=WGS84")
#make plots of stream, then add points of sensor locations
#removed axes and labels
```

```{r compare-sensor-IDs}
# comparing sensor IDs to figure out which ones died, or were not redeployed
# W3
# find the difference between all sensor locations and the ones actually deployed
# read in all deployment info
deploy <- read.csv("./summer2024/stic2024.csv")
w3 <- filter(deploy, wshed == "W3")
w3_n <- na.omit(w3)

# compare the actual sensor numbers deployed to the ideal or maximum
actual <- as.numeric(unique(w3_24$number))
ideal <- as.numeric(unique(w3_n$number))
setdiff(ideal, actual)

#create simple table to use for plotting
simple_table <- w3_n %>% 
  select(number, sensor, lat, long) %>% 
  unique() %>% 
  mutate("status" = "Good (23)")
simple_table$status[c(23, 4, 6, 10)] <- "Maybe (4)"
simple_table$status[c(25)] <- "Failed (1)"
simple_table$status[c(26, 30, 31)] <- "Not deployed (3)"
points_w3 <- vect(simple_table, geom=c("long", "lat"), crs = "+proj=longlat +datum=WGS84")

#### repeat for FB
deploy <- read.csv("./summer2024/stic2024.csv")
fb_deploy <- filter(deploy, wshed == "FB")
fb_n <- na.omit(fb_deploy)

# compare the actual sensor numbers deployed to the ideal or maximum
actual <- as.numeric(unique(fb_24$number))
ideal <- as.numeric(unique(fb_n$number))
setdiff(ideal, actual)

#create simple table to use for plotting
simple_table_fb <- fb_n %>% 
  select(number, sensor, lat, long) %>% 
  unique() %>% 
  mutate("status" = "Good (23)")
simple_table_fb <- simple_table_fb[order(simple_table_fb$number),]

simple_table_fb$status[c(8, 1)] <- "Maybe (4)"
simple_table_fb$status[c(18)] <- "Failed (1)"
simple_table_fb$status[c(10, 12, 16, 21, 30)] <- "Not deployed (3)"
points_fb <- vect(simple_table_fb, geom=c("long", "lat"), crs = "+proj=longlat +datum=WGS84")

### Repeat for ZZ
deploy <- read.csv("./summer2024/stic2024.csv")
zz_deploy <- filter(deploy, wshed == "ZZ")
zz_n <- na.omit(zz_deploy)

# compare the actual sensor numbers deployed to the ideal or maximum
actual <- as.numeric(unique(zz_24$number))
ideal <- as.numeric(unique(zz_n$number))
setdiff(ideal, actual)

#create simple table to use for plotting
simple_table_zz <- zz_n %>% 
  select(number, sensor, lat, long) %>% 
  unique() %>% 
  mutate("status" = "Good (24)")
simple_table_zz <- simple_table_zz[order(simple_table_zz$number),]

simple_table_zz$status[c(1, 23)] <- "Maybe (2)"
simple_table_zz$status[c(22, 28)] <- "Failed (2)"
#simple_table_fb$status[c(10, 12, 16, 21, 30)] <- "Not deployed (3)"
points_zz <- vect(simple_table_zz, geom=c("long", "lat"), crs = "+proj=longlat +datum=WGS84")

```

```{r}
# modified reference plots from W3_STIC, chunk #creating reference image of sensor locations
#w3
ggplot()+
  geom_spatvector(data = w3_stream_wgs, color = "grey", lwd = 1.5)+
  geom_spatvector(data = points_w3, aes(color = status))+#aes(color = percent_flowing), size = 2)+
  geom_text_repel(data = simple_table, aes(x = long, y = lat, label = number))+
  theme_void()+
  labs(title = "W3 2024 STICS")+
  theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))

#fb
ggplot()+
  geom_spatvector(data = fb_stream_wgs, color = "grey", lwd = 1.5)+
  geom_spatvector(data = points_fb, aes(color = status))+#aes(color = percent_flowing), size = 2)+
  geom_text_repel(data = simple_table_fb, aes(x = long, y = lat, label = number))+
  theme_void()+
  labs(title = "FB 2024 STICS")+
  theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))

#zz
ggplot()+
  geom_spatvector(data = zz_stream_wgs, color = "grey", lwd = 1.5)+
  geom_spatvector(data = points_zz, aes(color = status))+#aes(color = percent_flowing), size = 2)+
  geom_text_repel(data = simple_table_zz, aes(x = long, y = lat, label = number))+
  theme_void()+
  labs(title = "ZZ 2024 STICS")+
  theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))


#make map with pie charts in space
p_load(scatterpie)
#reformat data, start with just a single week
w3_fixed$binary <- 1
w3_fixed$binary[w3_fixed$wetdry == "dry"] <- 0

one_week <- filter(w3_fixed, datetime >= "2024-05-20 23:30:00") %>% 
  filter(datetime <= "2024-05-27 23:30:00") %>% 
  select(datetime, binary, number, lat, long) %>% 
  pivot_wider(names_from = datetime, values_from = binary)
names <- one_week %>% select(-c(number, lat, long)) %>% 
  colnames()

ggplot() + 
  geom_scatterpie(aes(x=long, y=lat, group=number), 
                           data=one_week,
                           cols=names,
                           size = 2,
                  color = NA) +   coord_equal()+ 
  theme(legend.position="none")
#pie chart plot is not working well
#fb
ggplot()+
  geom_spatvector(data = fb_stream_wgs, color = "grey", lwd = 1.5)+
  geom_spatvector(data = points_fb)+#aes(color = percent_flowing), size = 2)+
  geom_text_repel(data = data_fb, aes(x = long, y = lat, label = ID))+
  scale_colour_gradient(high = "darkslategray1", low = "darkslategray")+
  theme_void()+
  labs(title = "FB 2024 STICS")+
  theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))
#zz
ggplot()+
  geom_spatvector(data = zz_stream_wgs, color = "grey", lwd = 1.5)+
  geom_spatvector(data = points_zz)+#aes(color = percent_flowing), size = 2)+
  geom_text_repel(data = data_zz, aes(x = long, y = lat, label = ID))+
  scale_colour_gradient(high = "darkslategray1", low = "darkslategray")+
  theme_void()+
  labs(title = "ZZ 2024 STICS")+
  theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))
```

```{r}

```

