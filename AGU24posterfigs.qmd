---
title: "AGU24 poster figures"
format: html
editor_options: 
  chunk_output_type: console
---
```{r}
library(pacman)

p_load(maptools)
```

```{r}
seis <- read_csv("seismic_12_2_24.csv") %>% 
  filter(quality == "yes",
         grilla_number != 158)

ggplot(seis, aes(x = long, y = lat, color = as.numeric(depth)))+
  geom_point()+
  theme_classic()

#convert seismic measurements to spatial data
depths <- vect(seis, 
                  geom=c("long", "lat"), 
                   crs = "+proj=longlat +datum=WGS84")
plot(depths)
#reproject coordinates from WGS84 to NAD83 19N, which is the projection of raster
dd <- terra::project(depths, crs(m1))
plot(dd)
```

```{r}
#map of watershed 3 with depth to bedrock

ggplot()+
  geom_spatraster(data = hill)+
  theme_void()+
  #theme(legend.position = "")+
  scale_fill_gradientn(colors = c("black", "gray9", "gray48","lightgray", "white"))+
    new_scale_fill() +
  geom_spatraster(data = crop1, alpha = 0.5)+
  geom_sf(data = w3_outline, fill = NA, color = "black", alpha = 0.3)+
  geom_sf(data = w3_net, colour = "darkslategray3") +
    #geom_sf(data = lcc, colour = "midnightblue", pch = 19, size = 6) +
  geom_sf(data = dd, aes(colour = as.numeric(depth)), pch = 19, size = 3) +
  geom_sf(data = w3_pour, colour = "black") +
   scale_fill_hypso_c(palette = "dem_screen" , limits = c(200, 1000))+
  theme(rect = element_rect(fill = "transparent", color = NA))+
  ggspatial::annotation_scale(location = 'tr')


#map with stream segments labelled
ggplot()+
  geom_spatraster(data = hill)+
  theme_void()+
  #theme(legend.position = "")+
  scale_fill_gradientn(colors = c("black", "gray9", "gray48","lightgray", "white"))+
    new_scale_fill() +
  geom_spatraster(data = crop1, alpha = 0.5)+
  geom_sf(data = w3_outline, fill = NA, color = "black", alpha = 0.3)+
  geom_sf(data = w3_net, colour = "darkslategray3") +
  terra::text(w3_net)+
    #geom_sf(data = lcc, colour = "midnightblue", pch = 19, size = 6) +
  #geom_sf(data = dd, aes(colour = as.numeric(depth)), pch = 19, size = 3) +
  geom_sf(data = w3_pour, colour = "black") +
   scale_fill_hypso_c(palette = "dem_screen" , limits = c(200, 1000))+
  theme(rect = element_rect(fill = "transparent", color = NA))


#exploring to try to subset seismic points to just be the ones along W3 trib
plot(w3_net)
text(w3_net)

plot(w3_net[c(77,33,76,75),])
text(w3_net[c(77,33,76,75),])

plot(w3_net)
points(w3_net[c(77,33,76,75),])
text(w3_net)

#create a buffer, visualize which seismic measurements are within it
#5 m buffer
plot(buffer(w3_net[c(77,33,76,75),], 5))
points(dd)
points(lcc, col = "red")
crs(lcc, proj=TRUE)

buf <- buffer(w3_net[c(77,33,76,75),], 5)
#find which points lie in buffer
buf <- terra::project(buf, crs(m1))

as.data.frame(intersect(dd, buf)) %>% select(grilla_number, depth)
points(intersect(dd, buf), col = "blue")

#create subset of both seismic locations and 
plot(buf)
text(lcc)

#subset of stic locations
stics <- filter(lcc, ID %in% c(11, 12, 13, 14))
stic13 <- filter(lcc, ID == 13)
#subset of seis locations
seis_sub <- intersect(dd, buf)
plot(seis_sub)
#now snap all of these to the stream network
plot(w3_net)
crs(w3_net, proj=TRUE)
w3_net <- terra::project(w3_net, crs(lcc))

plot(buf)
plot(w3_net[c(77,33,76,75),])
plot(w3_net[c(33),], add = TRUE, col = "blue")
points(stic13)
click(w3_net[c(33),])
plot(w3_net)
points(snap(stic13, y = w3_net, tolerance = 30))
points(makeNodes(w3_net[c(33),]))
text(makeNodes(w3_net[c(33),]))
points(snap(stic13, y = makeNodes(w3_net[c(33),]), tolerance = 30))

#terra function to return length of lines
perim(w3_net)
nodes <- makeNodes(w3_net[c(33),])
as.data.frame(makeNodes(w3_net[c(33),]))

#try making it a raster
stream_rast <- rasterize(w3_net[c(33),], crop1)
writeRaster(stream_rast, "stream_rast.tif")

plot(stream_rast)
plot(w3_net[c(77,33,76,75),], 
     xlim = c(281610, 281650),
     ylim = c(4870990, 4871000))
plot(rasterize(w3_net[c(33),], crop1), add = TRUE)
points(stic13)
click(stream_rast, xy = TRUE)

newcoords <- c(281617.5, 4870996)

#whitebox tools method to snap

#save to file for use in whitebox functions
w3_pour_filename <- "./w3_dems/w3_pour.shp"
writeVector(w3_pour, w3_pour_filename, overwrite=TRUE)
#delineate streams
w3_streams <- "./w3_dems/w3_streams.tif"
wbt_extract_streams(flow_accum = w3_flowacc,
                    output = w3_streams,
                    threshold = 4000)
plot(rast(w3_streams))
points(lcc)

w3_stic_locs <- "w3_stic_locs.shp"
writeVector(lcc, w3_stic_locs, overwrite=TRUE)

#snap pour point to streams
w3_stic_locs_snap <- "w3_stic_locs_snap.shp"
wbt_jenson_snap_pour_points(pour_pts = w3_stic_locs,
                            streams = w3_streams,
                            output = w3_stic_locs_snap,
                            snap_dist = 40)
w3_stic_locs_r <- vect(w3_stic_locs_snap)
plot(rast(w3_streams))

points(w3_stic_locs_r, pch = 1)

#use snap pour points function from whiteboxtools to snap points to lines
#succeeded, now need to determine length along tributary
#convert raster of stream to vector
w3_streams_rast <- rast(w3_streams)
plot(w3_streams_rast)
w3_streams_rast[w3_streams_rast != 1] <- 0
p <- as.polygons(w3_streams_rast, dissolve = TRUE)
plot(p)
w3_streams_vect <- terra::lines(p)
plot(w3_streams_vect,
     xlim = c(281610, 281650),
     ylim = c(4870990, 4871000))


#use st_length to determine length between each point



```

#Depth-to-bedrock versus surface with persistency plotted
```{r exporting}

####Forget all of this, I am just going to do this in ARC
#paths to files saved for use in ARC
stic_pts <- "./AGU24posterAnalysis/stic_pts.shp"
seis_pts <- "./AGU24posterAnalysis/seis_pts.shp"
stream <- "./AGU24posterAnalysis/stream.tif"

#stic pts
w3_stic_locs_r <- vect(w3_stic_locs_snap)
writeVector(w3_stic_locs_r, stic_pts, overwrite=TRUE)

#seis pts (not snapped)
writeVector(seis_sub, seis_pts, overwrite = TRUE)

#stream raster (will need to convert to shapefile)
writeRaster(w3_streams_rast, stream, overwrite = TRUE)
```

```{r bringing-back-to-R}
#read in files that I created in ARC, and modified in excel to calculate accumulated distance
stic_dist <- read_csv("./AGU24posterAnalysis/processed_export/dist_btwn_stic.csv")
seis_dist <- read_csv("./AGU24posterAnalysis/processed_export/dist_btwn_seis.csv")
elevation <- read_csv("./AGU24posterAnalysis/processed_export/elevation.csv")

#join values of distance to values of depth and stic statistics
stic_dist_f <- stic_dist %>% select(ORIG_SEQ, Shape_Length) %>% 
  arrange(ORIG_SEQ) %>% 
  mutate(sum = cumsum(Shape_Length),
         ID = c(11, 12, 13, 14,NA)) %>% #STIC IDs pulled from earlier investigation above
  select(ID, sum) %>% 
  drop_na() %>% 
  left_join(pks, by = "ID")
#still need to add wetness characteristics of interest, and land surface elevation at these points
#seismic site IDs are in numerical order, but not quite sequential order

#something is not right with the surface elevations for my seismic measurements, so try extracting values from the DEM I have on R
#This fixed earlier issue, but now the sequence is messed up- to fix go back to original seismic sheet and just filter the ones that I know are along the stream.
#seismic sites that are along stream W3, excluding 148
seis_w3 <- seis %>% filter(grilla_number %in% c(215, 214, 213, 210, 209, 208, 207, 
                           206, 205, 204, 203, 199, 196, 
                           194, 192, 191))

#convert seismic measurements to spatial data
#these seismic locations are not snapped to the flowlines, snap to flowline

seis_snapped <- vect("./AGU24posterAnalysis/seis_snap2/seis_snap2.shp")
plot(dd)
plot(seis_snapped)
plot(dd, col = "red", add = TRUE)

#extract elevation from filled DEM
w3_filled <- "./w3_dems/1mdem_fill.tif"
seis_w3_ex <- extract(rast(w3_filled), seis_snapped) %>% 
  mutate(grilla_number = rev(c(215, 214, 213, 210, 209, 208, 207, 
                           206, 205, 204, 203, 199, 196, 
                           194, 192, 191))) %>% 
  rename(elevation_m = `1mdem_fill`) %>% 
  select(-ID)

#now I need to extract elevation values for the STIC sensor locations
#snapped stic sensor locations
w3_stic_locs_2 <- filter(w3_stic_locs_r, ID %in% c(11, 12, 13, 14))
stic_w3_ex <- extract(rast(w3_filled), w3_stic_locs_2) %>% 
    rename(elevation_m = `1mdem_fill`) %>% 
  mutate(ID = c(11, 12, 13, 14)) %>% 
  left_join(stic_dist_f, by = "ID") %>% 
  left_join(number_of_dries, by = "ID") #%>% 
  #pivot_longer(cols = c(pk, count))

seis_w3_ex %>%
  left_join(seis_dist_f, by = "grilla_number") %>% 
  left_join(seis, by = "grilla_number") %>% 
  select(grilla_number, )

#Final Figure
#####
seis_w3_ex %>%
  left_join(seis_dist_f, by = "grilla_number") %>% 
  left_join(seis, by = "grilla_number") %>% 
  mutate(surfaceMinusDepth = elevation_m - as.numeric(depth)) %>% 
  select(grilla_number, sum, elevation_m, surfaceMinusDepth) %>% 
  rename(Surface = elevation_m, Bedrock = surfaceMinusDepth) %>% 
  pivot_longer(cols = c(Surface, Bedrock)) %>% 
  ggplot(aes(x = sum, y = value))+
  geom_line(aes(lty = name))+
    theme_classic()+
      scale_x_reverse()+
  geom_point(data = stic_w3_ex, 
             aes(x = sum, y = elevation_m, color = pk), size = 5)+
  labs(x = "Distance to outlet (m)",
       y = "Elevation (m)")+
  scale_linetype_manual(values = c(2, 1), 
                        name = "")+
  scale_color_continuous(name = "Local Persistency",
                         breaks = c(0.5, 0.60, 0.70, 0.80, 0.90),
                         #limits = c(0.5, 1),
                         labels = c("50%", "60%", "70%", "80%", "90%"))



#calculate average duration of activation, then plot again
seis_w3_ex %>%
  left_join(seis_dist_f, by = "grilla_number") %>% 
  left_join(seis, by = "grilla_number") %>% 
  mutate(surfaceMinusDepth = elevation_m - as.numeric(depth)) %>% 
  select(grilla_number, sum, elevation_m, surfaceMinusDepth) %>% 
  rename(Surface = elevation_m, Bedrock = surfaceMinusDepth) %>% 
  pivot_longer(cols = c(Surface, Bedrock)) %>% 
  ggplot(aes(x = sum, y = value))+
  geom_line(aes(lty = name))+
    theme_classic()+
      scale_x_reverse()+
  geom_point(data = stic_w3_ex, 
             aes(x = sum, y = elevation_m, color = count), size = 5)+
  labs(x = "Distance to outlet (m)",
       y = "Elevation (m)")+
  scale_linetype_manual(values = c(2, 1), 
                        name = "")+
  scale_color_gradient(low = "red4",
  high = "orange", name = "Dynamism")
  scale_color_continuous(name = "Local Persistency",
                         breaks = c(0.5, 0.60, 0.70, 0.80, 0.90),
                         #limits = c(0.5, 1),
                         labels = c("50%", "60%", "70%", "80%", "90%"))
```

#Histograms of local persistency, dynamism, and number of days flowing
##Local persistency
```{r}
#first calculate pk
data_23 %>% 
  filter(wshed == "W3", mins %in% c(0, 30)) %>% 
  select(datetime, ID, lat, long, binary) %>% 
  group_by(ID) %>% 
  summarise(pk = sum(binary)/length(binary)*100) %>% 
  arrange(pk) %>% 
  ggplot()+
  geom_histogram(aes(x = pk, fill = after_stat(x)), color = "black",
                 binwidth = 10)+
  theme_classic()+
  scale_fill_gradient(low = "black",
  high = "white", name = "Flow Duration (%)")+
  labs(x = "Flow Duration (%)",
       title = "sensors = 31")+
    scale_y_continuous(expand = c(0, 0))

```

#wet proportion
```{r}
#group by date, and find the proportion of time flowing

```

#Show where topography does not work to predict
```{r}
#code from Testing Frameworks markdown
writeVector(points_w3, "./AGU24posterAnalysis/topo_model_output.shp")

ggplot()+
  geom_spatvector(data = w3_stream_wgs, color = "grey", lwd = 1.5)+
  geom_spatvector(data = points_w3, aes(color = percent_agreement), size = 3)+
  facet_wrap(~threshold)+#aes(color = percent_flowing), size = 2)+
  #geom_text_repel(data = simple_table, aes(x = long, y = lat, label = number))+
  theme_void()+
  scale_color_binned(type = "viridis",
                      breaks = c(30, 60, 90)#,
                      #limits = c(0, 40)
                     )+
  labs(title = "Agreement with New model, 7/23 - 11/23")+
  theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))
```


```{r}
#lets see how well local persistency lines up with depth
pks <- data_23 %>% 
  filter(wshed == "W3", mins %in% c(0, 30)) %>% 
  select(datetime, ID, lat, long, binary) %>% 
    group_by(ID, lat, long) %>% 
  rename("DATETIME" = datetime) %>% 
  summarise(pk = sum(binary)/length(binary)) %>% 
  select(-pk) %>% 
  ungroup()%>% 
  vect(geom=c("long", "lat"),
       crs = "+proj=longlat +datum=WGS84")

#make a dataframe with ID, lat and long, and record type for local persistency and for the seismic measurements
seis2 <- seis %>% 
  select(grilla_number, lat, long) %>% 
  rename("ID" = grilla_number)%>% 
  vect(geom=c("long", "lat"),
       crs = "+proj=longlat +datum=WGS84")
#bind rows, make spatial
dist_setup <- rbind(pks, seis2) %>% 
  vect(geom=c("long", "lat"),
       crs = "+proj=longlat +datum=WGS84")

#use st_distance to create distance matrix, filter to rows from the local persistency dataset, then choose the closest point from the other dataset
dist_matrix <- terra::distance(pks, seis2) %>% 
  as.data.frame() %>% 
  mutate("pk_ID" = row_number()) %>% 
  pivot_longer(!pk_ID, names_to = "seis_ID", values_to = "dist_deg")

output <- rep(1, length(pks$ID), NA)
distances <- rep(1, length(pks$ID), NA)
for(i in 1:length(pks$ID)){
  fil <- filter(dist_matrix, pk_ID == i)
  minID <- fil$seis_ID[fil$dist_deg == min(fil$dist_deg)]
  output[i] <- minID
  distances[i] <- fil$dist_deg[fil$dist_deg == min(fil$dist_deg)]
}

format_out <- data.frame("seis_ID" = output,
                         "distance_deg" = distances) %>% 
  mutate(seis_ID = as.numeric(substr(seis_ID, 2, nchar(seis_ID)))) %>% 
    mutate("ID" = row_number()) 



#distance really looks like it is in meters

#try again but with the points already converted to the other projection?
number_of_dries
```

```{r}
#now compare the nearest depth to bedrock to the local persistency
#seismic ID is not the grilla number, but the row number from the filtered dataset
seis_to_join <- seis %>% 
  select(grilla_number, depth, sd) %>% 
  mutate("seis_ID" = row_number(),
         depth = as.numeric(depth))
  #rename("seis_ID" = grilla_number)

data_23 %>% 
  filter(wshed == "W3", mins %in% c(0, 30)) %>% 
  select(datetime, ID, lat, long, binary) %>% 
    group_by(ID) %>% 
  rename("DATETIME" = datetime) %>% 
  summarise(pk = sum(binary)/length(binary)) %>% 
  ungroup() %>% 
  left_join(format_out, by = "ID") %>% 
  left_join(seis_to_join, by = "seis_ID") %>% 
  ggplot(aes(x = depth, y = pk))+
    geom_errorbar(aes(xmin=depth-sd, xmax=depth+sd), width=.2, color = "lightgrey")+
  geom_point()+
  labs(x = "Estimated Depth-to-bedrock (m)",
       y = "Local Persistency",
       title = "Relationship between depth and local persistency")+
  theme_classic()




#more complicated- compare the average and sd of depth to bedrock within the drainage area to how persistent a point is
```

